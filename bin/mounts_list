#!/usr/bin/env ruby

# Name ideas:
# * lsdisks, lsmounts, list_drives, mounts, disks
# * mounts_list is too long!

# To do:
# * list partitions that exist but aren't mounted! (parted?)
# * Don't pad the last column with space (or if we do, make sure the space comes *after* the color, so that strip works)
# * Switch to optparse
# * Also show output from parted -l (way too slow), hddtemp, smartctl, tune2fs (% of reserved space)
# * Compare mounted drives to list from fdisk and give warning if any drives exist that aren't mounted
# * Find out and use what the standard name is for referring to a physical disk (physical_disk) and a partition on the device (disk)
#   * Is 'volume' preferable to disk or partition?
#   * I've been using 'Partition' generically in DfParser::Partition, etc.
# * Add options for customization:
#   * List columns to show with --columns
#   * Allow user to customize thresholds used by colorize_percent(s)
#     * Allow absolute space remaining (100 MB) in addition to percent
#   * --si to use SI (base 10) units only, --binary to use binary units only, --si-and-binary to show both
#   * Store preferences in .mounts_list_rc

#-------------------------------------------------------------------------------
def usage
  puts <<End

Warning: This currently attempts to run blkid, fdisk -l, and hdparm -i with sudo, which may prompt for a password.
This command may not pass on the password prompt to you but will just sit there.
It is recommended that you add those commands to your sudoers file with NOPASSWD so that it won't prompt for a password.

username   ALL = NOPASSWD: \
              ...
              /usr/bin/du, \
              /bin/df, \
              /usr/sbin/smartctl, \
              /usr/sbin/hddtemp, \
              /sbin/vol_id, \
              /sbin/hdparm, \
              /sbin/blkid, \
              /sbin/fdisk -l, \

Options:
  -d, --device -- groups by device, and shows model name/serial number/disk capacity of each physical device (this is now the default)

  --no-color   -- disable color
End
  exit 1
end

#-------------------------------------------------------------------------------
require 'ostruct'
require 'pathname'
require 'rubygems'
#gem 'facets'
require 'facets'
#gem 'colored'
require 'colored'
require 'facets/blank'
require 'facets/array/delete_values'
require 'facets/symbol/to_proc'
require 'facets/class/cattr_accessor'
#gem 'quality_extensions'
require 'quality_extensions/string/with_knowledge_of_color'
require 'quality_extensions/safe_nil'
require 'quality_extensions/helpers/numbers'

#-------------------------------------------------------------------------------
# duplication with files_of_hanoi

partition_columns     = [:device_path, :mount_path, :file_system_type, :mount_options, :dump, :pass, :capacity, :capacity_binary, :space_free, :space_free_binary, :percent_full, :label, :uuid, :boot, :start, :end, :blocks]
physical_disk_columns = [:device_path, :device_info, :physical_capacity, :physical_capacity_binary]
columns = partition_columns | physical_disk_columns

Partition    = Struct.new(*partition_columns)
PhysicalDisk = Struct.new(*physical_disk_columns)

$columns_to_show = columns
$columns_to_show.delete_values(:mount_options, :dump, :pass)

# TODO: I want it to have attributes of both Hash ([] to access by device_path) and Array (each yields elements (disk objects) directly, not (key,value))
class DiskList < Array
  def initialize
    raise "#{self.class.name} is an abstract class and cannot be instantiated" if self.class.name =~ /(^|::)DiskList$/
  end

  def [](sought)
    find {|disk|
      disk.device_path == sought #or
      #disk.respond_to?(:mount_path) && disk.mount_path == sought
    }
  end
  def []=(device_path, new)
    #puts "device_path=#{device_path}, new=#{new}"
    if self[device_path]
      self[device_path]
    else
      if new.device_path.nil?
        new.device_path = device_path
      else
        raise "#{device_path} != #{new.device_path}"
      end
      self << new
      new
    end
  end

  def to_s
    "#{self.class.name}#{super}"
  end

  def inspect
    "#{self.class.name}#{super}"
  end
end

# aggregator, merges/combines data from different sources
class PartitionList < DiskList
  # def merge(other)
  # def <<(other)
  def +(other)
#    p self
#    p other
#    exit
    case other

    when MtabParser::PartitionList
      other.each do |mtab|
        disk = self[mtab.device_path] ||= Partition.new
        disk.mount_path       = mtab.mount_path
        disk.file_system_type = mtab.file_system_type
        disk.mount_options    = mtab.mount_options
        disk.dump             = mtab.dump
        disk.pass             = mtab.pass
      end

    when DfParser::PartitionList
      other.each do |df|
        disk = self[df.device_path] ||= Partition.new
        disk.capacity                  = "#{number_to_human_size(df._?.capacity)}"
        disk.capacity_binary           = "#{number_to_human_size(df._?.capacity, :base => 2)}"
        disk.space_free                = "#{number_to_human_size(df._?.space_free)}"
        disk.space_free_binary         = "#{number_to_human_size(df._?.space_free, :base => 2)}"
        disk.percent_full              = df._?.percent_full
      end

    when FdiskParser::PartitionList
      other.each do |fdisk|
        disk = self[fdisk.device_path] ||= Partition.new
        disk.device_path  , disk.boot  , disk.start  , disk.end  , disk.blocks  , disk.file_system_type =
        fdisk.device_path , fdisk.boot , fdisk.start , fdisk.end , fdisk.blocks , fdisk.file_system_type
      end

    else
      raise "Don't know how to add objects of class #{other.class}"
    end
    self
  end
end

class PhysicalDiskList < DiskList
  # def merge(other)
  # def <<(other)
  def +(other)
    case other

    when FdiskParser::PhysicalDiskList
      other.each do |fdisk_disk|
        disk = self[fdisk_disk.device_path] ||= PhysicalDisk.new
        disk.physical_capacity        = "#{number_to_human_size(fdisk_disk.physical_capacity)}"
        disk.physical_capacity_binary = "#{number_to_human_size(fdisk_disk.physical_capacity, :base => 2)}"
      end

    else
      raise "Don't know how to add objects of class #{other.class}"
    end
    self
  end
end

class MtabParser
  class PartitionList < ::PartitionList; end

  def initialize(mtab_path = '/etc/mtab')
    @mtab_path = mtab_path
    @disks = PartitionList.new
  end

  def parse
    File.open(@mtab_path, 'r') do |file|
      file.map do |line|
        if match = line.match(%r<^(/dev/\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+$>)
          #puts '-----------------------------------------'

          # Get the fstab data for this disk
          d = Partition.new
          device_path_or_uuid, d.mount_path, d.file_system_type, d.mount_options, d.dump, d.pass = match.captures
          if device_path_or_uuid =~ %r<^(/dev/\S+)>
            d.device_path = $1
            @disks << d
          else
            raise "Expected device_path_or_uuid"
          end
        end
      end
    end
    @disks
  end
end

class DfParser
  class PartitionList < ::PartitionList; end
  #class Partition < ::Partition; end

  def initialize(command_output = run_command)
    @command_output = command_output
    @disks = PartitionList.new
  end

  def run_command
    @block_size = 'kB'
    `df --block-size=#{@block_size} 2>/dev/null`.chomp
  end

  def parse
    @command_output.lines.each do |line|
      # An actual df line
      # We're currently only looking for those with device_paths starting with '/'
      # Example line: /dev/sde1             1.4T  233G  1.2T  17% /media/1.5
      if match = line.match(%r<^(/\S+)\s+(\d+#{@block_size})\s+(\d+#{@block_size})\s+(\d+#{@block_size})\s+(\S+)\s+(\S+)\s*$>)
        disk = Partition.new
        disk.device_path, disk.capacity, ignore, disk.space_free, disk.percent_full, disk.mount_path = match.captures
        disk.capacity, disk.space_free = disk.capacity.to_i * 1000, disk.space_free.to_i * 1000
        @disks << disk if disk.device_path && disk.mount_path
      else
        #puts "Line didn't match pattern: #{line}"
      end

    end
    @disks
  end
end

class BlkidParser
  class PartitionList < ::PartitionList; end
  class Partition < ::Partition; end

  def initialize(command_output = run_command)
    @command_output = command_output
    @disks = PartitionList.new
  end

  def run_command
    # blkid (without sudo) gives no output at all until I've run sudo blkid at least once. After that, I can run blkid without sudo and get the same output (it must cache it).
    `sudo blkid`.chomp
  end

  def parse
    @command_output.lines.each do |line|
      #puts line
      disk = Partition.new

      # Example line: /dev/sda1: UUID="b0f7fce7-226a-4990-8798-a4e7feb373d2" TYPE="ext3"
      # TODO: why does this only capture the last occurence, as in TYPE="ext3" and fail to capture the UUID= part?
      if match = line.match(%r<^(/\S+): (?:(LABEL|UUID|SEC_TYPE|TYPE)="([^"]+)" ?)+$>)
        disk.device_path = match.captures[0]
        line.scan(/(LABEL|UUID|SEC_TYPE|TYPE)="([^"]+)" ?/) do |captures|
          key, value = captures
          disk.send("#{key.downcase}=", value) if disk.respond_to?(key.downcase)
        end
      end

      @disks << disk if disk.device_path
    end
    @disks
  end
end

class FdiskParser
  class PartitionList    < ::PartitionList; end
  class PhysicalDiskList < ::PhysicalDiskList; end
  #class Partition        < ::Partition; end
  #class PhysicalDisk     < ::PhysicalDisk; end

  def initialize(command_output = run_command)
    @command_output = command_output
    @physical_disks = PhysicalDiskList.new
    @partitions = PartitionList.new
  end

  def run_command
    `sudo fdisk -l 2>&1`.chomp
  end

  def parse
    @command_output.lines.each do |line|

      # Example line: Disk /dev/sde: 1500.3 GB, 1500301910016 bytes
      if match = line.match(%r<^Disk (/\S+): (\S+ \S+), (\d+) bytes.*$>)
        disk = PhysicalDisk.new
        disk.device_path, ignore, disk.physical_capacity = match.captures
        disk.physical_capacity = disk.physical_capacity.to_i
        @physical_disks << disk if disk.device_path
      end

      # Example line: /dev/sda1   *           1        9763    78421266   83  Linux
      if match = line.match(%r<(^/dev/\S+)\s+(\*?)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(.+)$>)
        disk = Partition.new
        disk.device_path, disk.boot, disk.start, disk.end, disk.blocks, id, disk.file_system_type = match.captures
        disk.boot = disk.boot == '*'
        @partitions << disk if disk.device_path
      end

    end
    @physical_disks
    [@physical_disks, @partitions]
  end
end

DeviceInfo = Struct.new(:model, :firmware_revision, :serial_num)
class HdparmParser
  def initialize(output)
    @output = output
  end

  def parse
    d = DeviceInfo.new
    @output.lines.each do |line|
      # Model=WDC WD800JB-00CRA1                      , FwRev=17.07W17, SerialNo=WD-WMA8E2651827
      if match = line.match(%r{^\s+Model=([^,]+)\s*, FwRev=([^,]+)\s*, SerialNo=(.*)$})
        # Get the fstab data for this disk
        d.model, d.firmware_revision, d.serial_num = match.captures.map(&:strip)
      end
    end
    p "Could not get model from hdparm. Output=#{@output}" if d.model.nil?
    d unless d.model.nil?
  end
end

#---------------------------------------------------------------------------------------------------

class PhysicalDisk
end

class Partition
  @@physical_disks = {}
  cattr_accessor :physical_disks

  def physical_disk_path
    device_path.gsub(/\d+/, '')
  end

  def physical_disk
    @@physical_disks[physical_disk_path] ||= PhysicalDisk.new
    @@physical_disks[physical_disk_path].device_path = physical_disk_path
    @@physical_disks[physical_disk_path]
  end

  def colorize_percent(s)
    i = s.chomp('%').to_i
    case i
    when (0..75)
      s.green
    when (75..90)
      s.yellow
    when (90..100)
      s.red
    end
  end

  def self.labels
    {
      :device_path       => 'Device path',
      :mount_path        => 'Mount path',
      :space_free        => 'Free',
      :capacity          => 'Size',
      :space_free_binary => 'Free',
      :capacity_binary   => 'Size',
      :percent_full      => 'Full',
      :file_system_type  => 'Type',
      :mount_options     => 'Mount opts',
      :uuid              => 'UUID',
      :label             => 'Label',
    }
  end

  def self.column_headers(widths = Hash.new(0))
    labels[:device_path].        underline.ljust_with_color(widths[:device_path]).cyan                 + ' '        +
    labels[:mount_path].         underline.ljust_with_color(widths[:mount_path]).green                 + ' '        +
    labels[:file_system_type].   underline.ljust_with_color(widths[:file_system_type]).magenta         + ' '        +
    labels[:space_free].         underline.rjust_with_color(widths[:space_free]).cyan                  + '/'        +
    labels[:capacity].           underline.rjust_with_color(widths[:capacity]).magenta                 + ' '        +
    (labels[:space_free_binary]. underline.rjust_with_color(widths[:space_free_binary]).cyan           + '/' if $columns_to_show.include?(:space_free_binary)).to_s +
    (labels[:capacity_binary].   underline.rjust_with_color(widths[:capacity_binary]).magenta          + ' ' if $columns_to_show.include?(:capacity_binary)).to_s +
    labels[:percent_full].       underline.rjust_with_color(widths[:percent_full]).green               + ' '        +
    (labels[:mount_options].     underline.ljust_with_color(widths[:mount_options] + 2).magenta        + ' ' if $columns_to_show.include?(:mount_options)).to_s +
    labels[:uuid].               underline.ljust_with_color(widths[:uuid]).green                       + ' '        +
    labels[:label].              underline.ljust_with_color(widths[:label]).cyan                       + ' '        +
    ''
  end

  def to_pretty_line(widths = Hash.new(0))
    (
      device_path.                  ljust(widths[:device_path]).cyan                 + ' '        +
      mount_path.                   ljust(widths[:mount_path]).green                 + ' '        +
      file_system_type.             ljust(widths[:file_system_type]).magenta         + ' '        +
      space_free.                   rjust(widths[:space_free]).cyan                  + (space_free.blank? ? ' ' : '/') +
      capacity.                     rjust(widths[:capacity]).magenta                 + ' '        +
      (space_free_binary.            rjust(widths[:space_free_binary]).cyan           + (space_free_binary.blank? ? ' ' : '/') if $columns_to_show.include?(:space_free_binary)).to_s +
      (capacity_binary.              rjust(widths[:capacity_binary]).magenta          + ' ' if $columns_to_show.include?(:capacity_binary)).to_s +
      colorize_percent(percent_full.rjust(widths[:percent_full]))                    + ' '        +
      ("(#{mount_options})".         ljust(widths[:mount_options] + 2).magenta        + ' ' if $columns_to_show.include?(:mount_options)).to_s +
      uuid.                         ljust(widths[:uuid]).green                       + ' '        +
        label.                        ljust(widths[:label]).cyan                       + ' '        +
        ''
    )
  end

  def method_missing(id, *args)
    if physical_disk.respond_to?(id)
      physical_disk.send(id, *args)
    else
      super
    end
  end
end

#---------------------------------------------------------------------------------------------------

# Defaults
@show_device_info = true
@group_by_device  = true

require 'getoptlong'
#require 'optparse'
opts = GetoptLong.new(
  [ '--help', '-h',                GetoptLong::NO_ARGUMENT ],
  [ '--device', '-d',              GetoptLong::NO_ARGUMENT ],
  [ '--no-color', '--nc',          GetoptLong::NO_ARGUMENT ]
)
opts.each do | opt, arg |
  case opt
  when '--device', '-d'
    @show_device_info = true
    @group_by_device  = true
  when '--help', '-h'
    usage
  when '--no-color', '-nc'
    class String
      def colorize(string, options = {})
        string
      end
    end
  end
end

#---------------------------------------------------------------------------------------------------

#disks = mtab_disks.values.inject({}) do |hash, obj|
#  hash[obj.device_path] = obj
#  hash
#end

fdisk_physical_disks, fdisk_partitions = FdiskParser.new.parse
disks = PartitionList.new + fdisk_partitions + DfParser.new.parse + MtabParser.new.parse
vol_ids = BlkidParser.new.parse
#disks.each {|d| p d}

if @show_device_info
  Partition.physical_disks = PhysicalDiskList.new
  Partition.physical_disks += fdisk_physical_disks #+ fdisk_partitions
end

disks.each do |disk|
  if @show_device_info
    unless disk.physical_disk.device_info
      device_info = HdparmParser.new(`sudo hdparm -i #{disk.device_path}`).parse
      if device_info
      disk.physical_disk.device_info = device_info.model +
                        ((', Serial: ' + device_info.serial_num) unless device_info.serial_num.blank?).to_s
      end
    end
  end

  if vol_ids[disk.device_path]
    disk.label            = vol_ids[disk.device_path].label ? "Label: \"#{vol_ids[disk.device_path].label }\"" : ''
    disk.uuid             = "#{vol_ids[disk.device_path].uuid }"
  end

  # Stringize each column
  partition_columns.each do |column|
    disk.send("#{column}=", disk.send(column).to_s)
  end
  #physical_disk_columns.each do |column|
  #  disk.physical_disk.send("#{column}=", disk.physical_disk.send(column).to_s)
  #end
end

#---------------------------------------------------------------------------------------------------
widths = columns.inject({}) do |hash, column|
  hash[column] = disks.map(&column).map(&:to_s).map(&:length).max
  hash[column] = [hash[column], Partition.labels[column]._?.length || 0].max unless column == :device_path
  hash
end

puts Partition.column_headers(widths)
puts

if @group_by_device
  disks.sort_by(&:device_path).group_by(&:physical_disk).sort do |(a_physical_disk, a_disks), (b_physical_disk, b_disks)|
    a =         a_physical_disk.device_path
    b =         b_physical_disk.device_path
    a <=> b
  end.each do |physical_disk, disks|
    width1 = 2 + widths[:device_path] + 1 + widths[:mount_path] + 1 + widths[:space_free] + 1 + widths[:file_system_type]
    width2 = widths[:percent_full]

    out =
      physical_disk.device_path.ljust(width1).cyan                                        + ' ' +
      physical_disk.physical_capacity.to_s.rjust(widths[:capacity]).magenta               + ' ' +
      ''.rjust(widths[:space_free_binary])                                                + ' ' +
      physical_disk.physical_capacity_binary.to_s.rjust(widths[:capacity_binary]).magenta + ' ' +
      ''.ljust(width2)                                                                    + ' ' +
      "#{physical_disk.device_info}".blue                                                 + ' ' +
      ''
    puts out

    disks.each do |disk|
      puts '  ' + disk.to_pretty_line(widths)
    end
    puts
  end

else
  disks.each do |disk|
    puts disk.to_pretty_line(widths)
  end
end
