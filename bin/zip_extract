#!/usr/bin/ruby
# Compare with tar_extract
# To do:
# * use lib version of zip_contains_single_dir to increase speed

#---------------------------------------------------------------------------------------------------
# Parse args

require 'optparse'

@options = {
}

def parse_args
  ARGV.options do |opts|
    opts.banner = <<End
Usage: #{File.basename($0)} file.zip

Extracts zip file normally (unzip file.zip) if the contents of the tar file are all contained within a single directory.

Otherwise* creates a new directory with the same name as the zip file and extracts the contents into that new directory.

* That is, if the contents of the zip file, when extracted, would clutter your working directory with a bunch (>1) of files/directories because whoever created the zip was uninformed and didn't follow the considerate practice of making tar files that, when extracted, leave you with a directory named the same as the tar (except without the .tar extension).
End

    opts.on("-m", "--macosx-dirs-are-useless", "Pretend __MACOSX dirs don't exist. If the archive contains only a __MACOSX dir and another dir X, only dir X is retained (__MACOSX is deleted).") { @options[:macosx_dirs_are_useless] = true }
    opts.separator ""
    opts.on("-v", "--verbose", "Be more verbose")                                                                       { @options[:verbose] = true }
    opts.on("-h", "--help", "Show this help message.")                                                                  { puts opts; exit }
    opts.parse!
  end
end
parse_args

if ARGV.size == 0
  ARGV.unshift '--help'
  parse_args
end

#-------------------------------------------------------------------------------
def verbose_system(command)
  puts command if @options[:verbose]
  system command
end

#-------------------------------------------------------------------------------
require 'pathname'

filename = ARGV[0]
output = `zip_contains_single_dir --verbose --macosx-dirs-are-useless #{filename}`
output =~ /prefix: (.*)$/ and inner_dir = $1

if $?.success?
  system "unzip #{filename}"
  puts "Extracted contents of #{filename}, which contained single dir #{inner_dir}"
  system "rm -rf __MACOSX" if @options[:macosx_dirs_are_useless]
elsif $?.exitstatus >= 1
  dirname = filename.gsub(/.zip$/, '')
  if dirname == filename
    STDERR.puts "Filename (#{filename}) must end with .zip"
    exit 1
  else
    Pathname.new(dirname).mkpath
    system "unzip '#{filename}' -d '#{dirname}'"
    if @options[:macosx_dirs_are_useless]
      puts "Removing useless __MACOSX dir..."
      system "rm -rf '#{dirname}/__MACOSX'" 
      if inner_dir
        verbose_system "mv '#{dirname}' '#{dirname}.delete'" 
        verbose_system "mv '#{dirname}.delete/#{inner_dir}' ./" 
        system "rmdir '#{dirname}.delete'" 
        puts "Extracted contents of #{filename}, which contained single dir #{inner_dir}"
      else
        puts "Extracted contents of #{filename} within new directory #{dirname}"
      end
    else
      puts "Extracted contents of #{filename} within new directory #{dirname}"
    end
  end
else
  raise 'unrecognized status code'
end
