#!/bin/bash

# Ideas for next version:
# Use Ruby to recurse directory trees, like sync_paths
# Emit a blank line in L for file if only exists in R, so that it lines up in vimdiff

mkdir -p ~/tmp

ldir="$1"
rdir="$2"

# Step 1: For every file, get its full details using ls
 
#pushd "$ldir"
#find . -print0 | xargs -0 -n1 ls -ld > ~/tmp/dir_diff-left
#popd
#
#pushd "$rdir"
#find . -print0 | xargs -0 -n1 ls -ld > ~/tmp/dir_diff-right
#popd

# Step 2: Extract only the details we want from the ls output

ls_parser --size --filename < ~/tmp/dir_diff-left  > ~/tmp/dir_diff-left2
ls_parser --size --filename < ~/tmp/dir_diff-right > ~/tmp/dir_diff-right2

# Step 3: Strip off that directory path prefix from each path, so that we don't throw off vimdiff
#
#sed "s#$ldir##g" ~/tmp/dir_diff-left2 > ~/tmp/dir_diff-left3
#sed "s#$rdir##g" ~/tmp/dir_diff-right2 > ~/tmp/dir_diff-right3

# Step 4: Sort by filename (column 2)
#
#gawk '{printf("%s \t %s \n", $2, $1)}' ~/tmp/dir_diff-left3 | sort | gawk '{printf("%s \t %s \n", $2, $1)}'  > ~/tmp/dir_diff-left4
#gawk '{printf("%s \t %s \n", $2, $1)}' ~/tmp/dir_diff-right3 | sort | gawk '{printf("%s \t %s \n", $2, $1)}'  > ~/tmp/dir_diff-right4

# Step 5: Prepend the directory path at the top of each file, so they can see which file the left represents and which file the right represents

echo "$ldir" > ~/tmp/dir_diff-left5
echo "$rdir" > ~/tmp/dir_diff-right5
cat ~/tmp/dir_diff-left2 >> ~/tmp/dir_diff-left5
cat ~/tmp/dir_diff-right2 >> ~/tmp/dir_diff-right5


vimdiff ~/tmp/dir_diff-left5 ~/tmp/dir_diff-right5
