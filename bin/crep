#!/bin/bash

function begin
{
	echo
	echo ----------------------------------------
	echo Command Line Search/Replace
	echo ----------------------------------------
	echo
}

function end
{
        echo
        echo ----------------------------------------
        echo
        exit
}

find=${1//\//\\/}		# since the sed expression uses slashes, we'll need to escape these slashes
replace=${2//\//\\/}	# ditto
grep_ext=$3

begin

###########################################
# get the lines to parse ... they could come from stdin as the result of some complex grep, or from a simple cgrep based on $find
###########################################
# the -t1 is a timeout ... basically i don't know how to read from stdin ONLY IF stdin already exists ... i don't want keyboard input ... -t0 won't read anything, though
while read -t1 line
do
	if [ -z "$line" ]; then continue; fi
	if [ -z "$results" ]
	then results=$line;
	else results="$results
$line"
	fi
done
exec 0</dev/tty		#return stdin to the terminal (keyboard) ... without this, subsequent 'read' attempts wouldn't wait for input

if [ -z "$results" ]
then
	# use cgrep to search the proper locations
	echo -e '\033[1;31mNo cgrep received ... retrieving own results\033[0m'; echo;
	# first convert some sed pecularities to grep syntax
	cgrep_find=${find//\\\\(/(}
	cgrep_find=${cgrep_find//\\\\)/)}
	#results=`./cgrep "$cgrep_find" --color=never`
	results=`~/svn/devscripts/bin/cgrep "$cgrep_find"`
fi

####################
# IFS determines which characters are used to separate
# pieces, for example when doing a 'for' on some string
####################
OIFS=$IFS
IFS="
"

result_count=`echo "$results" | wc -l`
result_counter=0

for line in $results
do
        file=${line%%:*}                        # strip from first : to end
        line=${line#*:}                         # strip from beginning to first : (the file part ... already saved)
	line_num=${line%%:*}			# strip from first : to end
	code=${line#*:}				# strip from beginning to first :

	result_counter=`expr $result_counter + 1`

	######################
	# feedback / preview #
	######################
        echo -e MATCH $result_counter of $result_count FOUND IN ${file}, LINE ${line_num}
        echo -n "ORIGINAL: "
        echo -e `echo "$code" | sed -e "s/$find/\\\\\033[1;34m&\\\\\033[0m/gi"`
        echo -n " PREVIEW: "
        echo -e `echo "$code" | sed -e "s/$find/\\\\\033[1;34m${replace}\\\\\033[0m/gi"`

	######################
        # ask for what to do #
	######################
        if [[ $replace_all == 'yes' ]]
        then
                action=r
        else
                echo -n Action:
                echo -e -n " \\033[1mR\\033[0meplace "
                echo -n /
                echo -e -n " \\033[1mA\\033[0mll "
                echo -n /
                echo -e -n " \\033[1mS\\033[0mkip "
                echo -n /
		echo -e -n " \\033[1mC\\033[0mustom "
		echo -n /
                echo -e -n " \\033[1mQ\\033[0muit "
                echo -n ":: "
                read -n1 action
                action=`echo "$action" | tr [:upper:] [:lower:]`
		echo
        fi

	##############################
	# act according to direction #
	##############################
	if [[ $action == 'a' ]]
	then
		replace_all=yes
		action=r
	fi

	case $action in
		c)
			echo -n 'enter a custom replace string: '
			read replace2
                	sed -e "${line_num}s/${find}/${replace2}/gi" "$file" > /tmp/sr$$ && cat /tmp/sr$$ > $file && rm /tmp/sr$$
			;;
		r)
			sed -e "${line_num}s/$find/$replace/gi" "$file" > /tmp/sr$$ && cat /tmp/sr$$ > $file && rm /tmp/sr$$
			;;
		s)
	                continue
			;;
		q)
        	        quit
			;;
		*)
			continue
			;;
        esac
done

IFS=$OIFS

end
