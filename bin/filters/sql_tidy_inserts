#!/usr/bin/ruby
# a filter/pipeline command

#---------------------------------------------------------------------------------------------------
# To do:

#---------------------------------------------------------------------------------------------------
# Parse args

require 'optparse'

@options = {
  unquote_column_names: true,

  between_tables: '=',
  between_rows: 'newline',

  passes: 2,
}

def parse_args
  ARGV.options do |opts|
    opts.banner = <<End
Usage: stdin | #{File.basename($0)}
Usage: #{File.basename($0)} input_file

Formats all the INSERT statements in a DB dump (.sql file) nicely, breaking each into 2 lines
(line 1 for the column names, line 2 for the values) and aligning the values with its corresponding
column name.
End

    opts.on("--unquote-column-names {0|1}", Integer, "Remove ` from column names that are simple enough to not require them") \
      {|v| @options[:unquote_column_names] = v == 1 }

    opts.on("--between-tables <string>", "Output <string> between each table. = (default) is a line of ='s) (Pass --between-tables='' for no separator.)") \
      {|v| @options[:between_tables] = v*100 }

    opts.on("--between-rows <string>", "Output <string> between each row. 'newline' (default) will put a blank line after each insert.) (Pass --between-tables='' for no separator.)") \
      {|v| @options[:between_rows] = v }

    opts.on("--passes <num>", Integer, "2 passes (the default) are required for best results. With only 1 pass, we don't know the lengths of values we haven't encountered yet, so the best we can do is base our current width on the present and past values.") \
      {|v| @options[:passes] = v }

    opts.on("--start-ids-at <ruby_hash>", "Adjust IDs to start at a different number (in case there are conflicts between ids in the dump and ids added since then in the actual database).",
                                          "<ruby_hash> can be {table:id} or {table:{column:id}}.",
                                          "Example: --start-ids-at='{users:101}'",
                                          "or: --start-ids-at='{users: {id:101, address_id:20}, addresses: {id:20}, posts:{id:4001, user_id:101} }'",
                                          "If your foreign key names follow the Rails convention of user_id referencing users.id, then (assuming you actually supplied a starting point for users.id and assuming pluralize is able to inflect the plural) it will automatically adjust the foreign keys to whatever it adjusted the corresponding primary key.") \
      {|v| @options[:start_ids_at] = eval(v) }

    opts.separator ""

    opts.on("-v", "--verbose", "Be more verbose") \
      { @options[:verbose] = true }

    opts.on("-h", "--help", "Show this help message.") \
      { puts opts; exit }

    opts.parse!
  end
end
parse_args

if ARGV.size == 0
  ARGV.unshift '--help'
  parse_args
end

#---------------------------------------------------------------------------------------------------
# Normalize/adjust options

v = @options[:between_tables]; @options[:between_tables] = v ? "/*#{v.to_s*100}*/" : ''
v = @options[:between_rows]; @options[:between_rows] = {'newline' => "\n"}[v] || v 

if v = @options[:start_ids_at]
  @options[:start_ids_at] = v.inject({}) do |hash, (k,v)|
    if v.is_a?(Hash)
      hash[k] = v
    elsif v.is_a?(Fixnum)
      hash[k] ||= {}
      hash[k][:id] = v
    else
      raise "start_ids_at[#{k}] was #{v} (class #{v.class}), but was expected to be either a Hash or a Fixnum"
    end
    hash
  end
  STDERR.puts @options[:start_ids_at].inspect if @options[:verbose]
end

#---------------------------------------------------------------------------------------------------
if ARGV[0]
  input = File.read(ARGV[0])
else
  input = STDIN.read
end

#---------------------------------------------------------------------------------------------------
# Dependencies

require 'csv'
csv_options = (CSV.send :remove_const, :DEFAULT_OPTIONS).dup
csv_options[:quote_char] = "'"
CSV::DEFAULT_OPTIONS = csv_options.freeze

require 'facets/string/bracket'
require 'quality_extensions/object/send_if'
require 'quality_extensions/safe_nil'
require 'active_support' if @options[:start_ids_at]

#---------------------------------------------------------------------------------------------------
class SqlTidy
  class Inserts
    InsertRegexp = /^INSERT INTO (\S+) \(([^\)]+)\) VALUES ?\((.+)\);?\s*$/i

    def initialize(input, options)
      @input = input
      @options = options
      @id_values = {}
      @widths = {}
    end

    def normalize_table_name(table_name)
      table_name._?.unbracket("`").to_sym
    end

    def each_line(each_table = nil, &each_line)
      prev_table = nil

      lines = @input.lines.map do |line|
        if line =~ InsertRegexp
          #-----------------------------------------------------------------------------------------
          # Extract parts from regexp match

          table_orig, columns, values_orig = $1, $2, $3
          table = normalize_table_name(table_orig)

          columns = columns.parse_csv.map(&:strip)
          
          # FIXME: This will probably break things if there are commas within a quoted value. But if we DON'T do this, it will give this error: Unclosed quoted field on line 1. (CSV::MalformedCSVError)
          values = values_orig.gsub(/, */, ",")
          begin
            values_from_csv = values.parse_csv
          rescue CSV::MalformedCSVError
            p values
            raise
          end
          # It would be nice if I could get away with just using parse_csv here, but even though it seems to cause no problems to parse the value list as a CSV, when we try to convert it back, we run into one difference from CSV format: CSV doesn't put quotes around strings (unless the string contains commas, etc.).
          values_with_knowledge_of_quoted = values.scan(/(?=.)('?)((?:\\'|[^',])*)(\1)(?:, *|\Z)/)
          values_without_quotes = values_with_knowledge_of_quoted.map {|a| a[1]}
          was_quoted            = values_with_knowledge_of_quoted.map {|a| a[0] == "'"}
          values                = values_with_knowledge_of_quoted.map {|a| a.join}
          if values_from_csv != values_without_quotes
            STDERR.puts "Warning: Possible bug in our parser/regexp! (We got something different than the CSV library.)"
            STDERR.puts "values_from_csv=#{values_from_csv.inspect}"
            STDERR.puts "values         =#{values_without_quotes.inspect}"
          end

          #-----------------------------------------------------------------------------------------

          if prev_table != table
            each_table._?.call
            prev_table = table
          end

          columns.map! {|column| column =~ /\A`\w+`\Z/ ? column.unbracket('`') : column } if @options[:unquote_column_names]

          @id_values[table] ||= {}
          @widths[table] ||= []

          columns.each.with_index do |column, i|
            value = values[i]

            if column =~ /id/
              @id_values[table][column.to_sym] ||= []
              @id_values[table][column.to_sym] |= [value.to_i]
              #puts "@id_values[#{table.inspect}]=#{@id_values[table].inspect}"
            end

            @widths[table][i] = [@widths[table][i] || 0, column.to_s.length, value.to_s.length].max
          end

          if block_given?
            yield true, line, table_orig, columns, values
          end

        # Not an insert_line
        else
          if block_given?
            yield false, line, table_orig, nil, nil, nil
          end
        end
      end
    end

    def tidy
      # Optional Pass 1 to get lengths
      each_line if @options[:passes] > 1

      #---------------------------------------------------------------------------------------------
      # The main pass
      each_table = proc {
        puts @options[:between_tables]
      }

      each_line(each_table) do |is_insert_line, line, table_orig, columns, values|
        if is_insert_line
          table = normalize_table_name(table_orig)
          padded_columns = []
          padded_values = []
          columns.each.with_index do |column, i|
            value = values[i]
            value = adjust_id(table, column, value)
            @widths[table][i] = [@widths[table][i] || 0, column.to_s.length, value.to_s.length].max

            padded_columns << column.to_s.ljust(@widths[table][i])
            padded_values  << value. to_s.ljust(@widths[table][i])
          end

          puts \
            "INSERT INTO #{    table_orig.rjust(6)           } (#{padded_columns.join(', ')})\n" +
            "            #{'VALUES'.rjust(table_orig.length)} (#{padded_values. join(', ')});\n" +
            @options[:between_rows].to_s
        else
          puts line
        end
      end
    end


    def adjust_id(table, column, value)
      if @options[:start_ids_at]
        new_start_id = nil

        #puts "@options[:start_ids_at][#{table._?.to_sym}] = #{@options[:start_ids_at][table._?.to_sym]}"
        if start_id_for_this_table = @options[:start_ids_at][table._?.to_sym]._?[column.to_sym]
          new_start_id = start_id_for_this_table
          lookup_table = table
          lookup_column = column
        end

        if new_start_id.nil?
          if column =~ /^(\w*)_id$/
            table_for_foreign_key = $1.pluralize.to_sym
          end
          if start_id_for_foreign_table = @options[:start_ids_at][table_for_foreign_key._?.to_sym]._?[:id]
            new_start_id = start_id_for_foreign_table
            lookup_table = table_for_foreign_key
            lookup_column = :id
          end
        end

        if new_start_id
          # The lowest (min) value we've seen for this column so far (start_id) will be mapped to new_start_id
          # and every other (higher) value will be as much more than new_start_id as it was from that min value.
          #puts "new_start_id=#{new_start_id.inspect}"
          #puts "@id_values[#{lookup_table}][#{lookup_column}]=#{@id_values[lookup_table][lookup_column].inspect}"
          if value.to_s =~ /^\d*$/
            #puts "@id_values[#{lookup_table}][#{lookup_column}]=#{@id_values[lookup_table].inspect}[#{lookup_column.inspect}]"
            start_id = @id_values[lookup_table][lookup_column.to_sym].min
            offset = value.to_i - start_id
            new_value = new_start_id + offset
            puts "/* Adjusting #{column} column from #{value} to #{new_value} (started at: #{start_id} => #{new_start_id}, offset: #{offset}) */" if @options[:verbose]
            return new_value
          else
            puts "/* Can't adjust #{column} column from #{value} -- not numeric */" if @options[:verbose]
          end
        end
      end
      return value
    end

  end
end

#---------------------------------------------------------------------------------------------------
SqlTidy::Inserts.new(input, @options).tidy
