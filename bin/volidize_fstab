#!/usr/bin/ruby

#-------------------------------------------------------------------------------
# To do:
# * prettyify fstab, align columns, etc.

#-------------------------------------------------------------------------------
def usage
  puts <<End
Options:
  --no-color   -- disable color
End
  exit 1
end

#-------------------------------------------------------------------------------
require 'rubygems' 
require 'facets'
require 'colored'
require 'pathname'
require 'facets/blank'
require 'facets/symbol/to_proc'
require 'quality_extensions/string/with_knowledge_of_color'

#-------------------------------------------------------------------------------
# duplication with files_of_hanoi

columns = [:uuid, :device_path, :mount_path, :file_system_type, :mount_options, :dump, :pass, :vol_id]
Disk = Struct.new(*columns)

class FstabParser
  def initialize(fstab_path)
    @fstab_path = fstab_path
  end

  def start
    File.open(@fstab_path, 'r') do |file|
      i = 0
      device_path_for_line = []

      file.map do |line|
        if line =~ %r<^# (/dev/\S+)>
          device_path_for_line[i+1] = $1
        end

        # An actual fstab line
        if match = line.match(%r<^(/dev/\S+|UUID=\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+$>)
          #puts '-----------------------------------------'

          # Get the fstab data for this disk
          d = Disk.new
          device_path_or_uuid, d.mount_path, d.file_system_type, d.mount_options, d.dump, d.pass = match.captures
          if device_path_or_uuid =~ /UUID=(\S+)/
            d.uuid = $1
            #puts d.uuid
            d.device_path = device_path_for_line[i]
          elsif device_path_or_uuid =~ %r<^(/dev/\S+)>
            d.uuid = nil
            d.device_path = $1
            #puts d.device_path
          else
            raise "Expected device_path_or_uuid"
          end
        end
        i += 1
        d
      end.compact
    end
  end

  def each_entry!
    # (with comments above entry)
    # TODO: replace entry with new formatted entry?
    yield entry
  end
end


DeviceInfo = Struct.new(:model, :firmware_revision, :serial_num)
class VolIdParser
  class NotFoundError < StandardError; end

  def initialize(output)
    @output = output
  end

  def start
    @output.each do |line|
      # ID_FS_UUID=008E-54E2
      if match = line.match(%r{^ID_FS_UUID=(.+)$})
        return $1
      end
    end
    raise NotFoundError, "Couldn't find ID_FS_UUID line. Output=#{@output}"
  end
end


#---------------------------------------------------------------------------------------------------

require 'getoptlong'
opts = GetoptLong.new(
    [ '--help', '-h',                GetoptLong::NO_ARGUMENT ],
    [ '--device', '-d',              GetoptLong::NO_ARGUMENT ],
    [ '--no-color', '--nc',          GetoptLong::NO_ARGUMENT ]
)
opts.each do | opt, arg |
  case opt
  when '--device', '-d'
    @show_device_info = true
  when '--help', '-h'
    usage
  when '--no-color', '-nc'
    class String
      def colorize(string, options = {})
        string

      end
    end
  end
end

#---------------------------------------------------------------------------------------------------


#lines = `mount`.lines
#mounts = lines.inject([]) do |mounts, line|
#  #/dev/sda1 on /media/500B1 type fuseblk (rw,nosuid,nodev,allow_other,default_permissions,blksize=4096)
#  #/dev/sda2 on /media/500B2 type ext3 
#  if line.chomp =~ /(\S+) on (\S+) type (.*)$/
#
#    name        = $1
#    mount_point = $2
#    type        = $3
#    @longest_name = [name.length, @longest_name.to_i].max
#
#    branches << Mount.new(name, mount_point, type)
#    branches
#  else
#    puts "Line in unexpected format: #{line}"
#  end
#end

disks = FstabParser.new('/etc/fstab').start

# Get the *actual* vol_id
disks.each do |disk|
  next unless disk.device_path =~ %r(^/dev/hd|^/dev/sd)
  begin
    vol_id = VolIdParser.new(`sudo vol_id #{disk.device_path}`).start
  rescue VolIdParser::NotFoundError
    puts "While trying to get vol_id for #{disk.device_path}: #{$!.inspect}".red
  end
  disk.vol_id = vol_id

  puts "vol_id '#{vol_id}' doesn't match UUID from fstab for mount #{disk}. Do you need to update the comment?".red if disk.uuid != vol_id
  puts "vol_id '#{vol_id}' matches UUID from fstab for mount #{disk.device_path} / #{disk.mount_path}".green if disk.uuid == vol_id
end

#widths = columns.inject({}) do |hash, column|
#  hash[column] = disks.map(&column).map(&:to_s).map(&:length).max
#  hash
#end

class Disk
  def to_pretty_fstab_entry(widths = Hash.new(0))
    device_path.          ljust(widths[:device_path]).cyan           + ' ' +
    mount_path.           ljust(widths[:mount_path]).green           + ' ' +
    file_system_type.     ljust(widths[:file_system_type]).magenta   + ' ' +
     "(#{mount_options})".ljust(widths[:mount_options]+2).magenta    + ' ' +
    ''
  end
end

